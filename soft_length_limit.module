<?php

/**
 * @file
 * Soft Length Limit module
 */
/*
 * Helper-function that returns the field widget or form element types that should be affected by this module
 *
 * @param $usage
 *   The desired usage of the data, can be one of 'fields' or 'elements'
 * @return
 *   An array field widget or form element type names
 *  
 */
function _soft_length_limit_types($usage) {
  switch ($usage) {
    case 'fields':
      return array('text_textarea', 'text_textfield', 'text_textarea_with_summary');
    case 'elements':
      return array('textarea', 'textfield', 'text_format');
  }
}

/*
 * Implements hook_form_FORM_ID_alter(&$form, &$form_state, $form_id)
 * 
 */

function soft_length_limit_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $types = _soft_length_limit_types('fields');

  if (in_array($form['#instance']['widget']['type'], $types)) {
    $form['instance']['widget']['settings']['soft_length_limit'] = array(
      '#type' => 'textfield',
      '#title' => t('Soft length limit'),
      '#default_value' => isset($form['#instance']['widget']['settings']['soft_length_limit']) ?
          $form['#instance']['widget']['settings']['soft_length_limit'] : NULL,
      '#description' => t('If any value is given here, a counter will appear next to this field, informing the user of the chosen number of allowed characters. If the number is exceeded, a warning will be shown.'),
      '#element_validate' => array('element_validate_integer_positive'),
    );
  }
}

/*
 * Implements hook_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode)
 * 
 */

function soft_length_limit_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $fields = field_info_instances($entity_type, $form['#bundle']);
  $elements = array();
  foreach ($fields as $key => $value) {
    if (isset($value['widget']['settings']['soft_length_limit']) &&
        $value['widget']['settings']['soft_length_limit'] > 0) {
      $elements[$key] = $value;
    }
  }
  if (count($elements)) {
    soft_length_limit_set_attr($form, $elements);
    //Adds the javascript and CSS files as form attachments, in case the init hook does not add them due to the context
    // or settings
    $form['#attached']['js'][] = drupal_get_path('module', 'soft_length_limit') . '/jquery.textchange.min.js';
    $form['#attached']['js'][] = drupal_get_path('module', 'soft_length_limit') . '/soft_length_limit.js';
    $form['#attached']['css'][] = drupal_get_path('module', 'soft_length_limit') . '/soft_length_limit.css';
    drupal_add_js(array(
      'soft_length_limit' => array(
        'maxlength_exclude_selectors' => variable_get('soft_length_limit_maxlength_exclude_selectors', array()),
      )
        ), array('type' => 'setting'));
  }
}

/*
 * Recursive helper function that sets the correct attributes for the forn elements with a specific soft limit
 *  specified, and continues through child elements 
 * 
 * @param $element The form element to iterate through
 * 
 * @param $sub_element Array of the elements which should have a soft limit attribute
 * 
 */

function soft_length_limit_set_attr(&$element, $sub_elements) {
  $children = element_get_visible_children($element);
  $types = _soft_length_limit_types('elements');
  foreach ($children as $value) {
    if (isset($element[$value]['#type']) && in_array($element[$value]['#type'], $types)) {
      if (isset($element[$value]['#field_name']) && isset($sub_elements[$element[$value]['#field_name']])) {
        $soft_limit = $sub_elements[$element[$value]['#field_name']]['widget']['settings']['soft_length_limit'];
        $element[$value]['#soft_length_limit'] = ( isset($element[$value]['#maxlength']) &&
            $soft_limit > $element[$value]['#maxlength'] ) ? $element[$value]['#maxlength'] : $soft_limit;
        $element[$value]['#attributes']['class'][] = 'soft-length-limit';
        $element[$value]['#attributes']['data-soft-length-limit'] = $soft_limit;
      }
    }
    soft_length_limit_set_attr($element[$value], $sub_elements);
  }
}

/*
 * Implements hook_init()
 * 
 */

function soft_length_limit_init() {
  //Return if counter on maxlength fields is disabled
  if (variable_get('soft_length_limit_maxlength_counter_disabled', FALSE)) {
    drupal_add_js(array(
      'soft_length_limit' => array('maxlength_counter_disabled' => TRUE),
        ), array('type' => 'setting'));
    return;
  }
  //Or add the javascript to every page that uses the admin theme
  global $theme_key;

  $admin_only = variable_get('soft_length_limit_maxlength_counter_admin_only', FALSE);
  if ($admin_only) {
    if ($theme_key != variable_get('admin_theme', 'seven')) {
      return;
    }
  }
  else {
    $allowed_themes = variable_get('soft_length_limit_maxlength_counter_themes', array());
    if (count($allowed_themes) && !in_array($theme_key, $allowed_themes)) {
      return;
    }
  }

  drupal_add_js(drupal_get_path('module', 'soft_length_limit') . '/jquery.textchange.min.js');
  drupal_add_js(drupal_get_path('module', 'soft_length_limit') . '/soft_length_limit.js');
  drupal_add_css(drupal_get_path('module', 'soft_length_limit') . '/soft_length_limit.css');
  drupal_add_js(array('soft_length_limit' => array(
      'maxlength_exclude_selectors' => variable_get('soft_length_limit_maxlength_exclude_selectors', array())),
      ), array('type' => 'setting'));
}
